####
# This Dockerfile is used in order to build a container that runs the Quarkus application in JVM mode
#
# Before building the container image run:
#
# ./mvnw package
#
# Then, build the image with:
#
# docker build -f src/main/docker/Dockerfile.jvm -t dropchop/snakejar-example-jvm .
#
# Then run the container using:
#
# docker run -i --rm -p 8080:8080 quarkus/snakejar-example-jvm
#
# If you want to include the debug port into your docker image
# you will have to expose the debug port (default 5005) like this :  EXPOSE 8080 5005
#
# Then run the container using :
#
# docker run -i --rm -p 8080:8080 -p 5005:5005 -e JAVA_ENABLE_DEBUG="true" dropchop/snakejar-example-jvm
#
###
FROM registry.access.redhat.com/ubi8/ubi-minimal:8.4
USER root

ARG JAVA_PACKAGE=java-11-openjdk-headless
ARG RUN_JAVA_VERSION=1.3.8
ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en'

COPY model /deployments/model
COPY requirements.txt /deployments/requirements.txt

# Install java and the run-java script
# Also set up permissions for user `1001`
RUN microdnf install curl ca-certificates ${JAVA_PACKAGE} \
    && microdnf update \
    && microdnf module enable python39 \
    && microdnf install python39-pip \
    && microdnf install python39-devel \
    && microdnf install python39-wheel \
    && microdnf install gcc \
    && microdnf install gcc-c++ \
    && microdnf clean all \
    && chown 1001 /deployments \
    && chmod "g+rwX" /deployments \
    && chown -R 1001:root /deployments \
    && curl https://repo1.maven.org/maven2/io/fabric8/run-java-sh/${RUN_JAVA_VERSION}/run-java-sh-${RUN_JAVA_VERSION}-sh.sh -o /deployments/run-java.sh \
    && chown 1001 /deployments/run-java.sh \
    && chmod 540 /deployments/run-java.sh \
    && echo "securerandom.source=file:/dev/urandom" >> /etc/alternatives/jre/conf/security/java.security

# Configure the JAVA_OPTIONS, you can add -XshowSettings:vm to also display the heap size.
ENV JAVA_OPTIONS="-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager"
# We make four distinct layers so if there are application changes the library layers can be re-used
COPY --chown=1001 target/quarkus-app/lib/ /deployments/lib/
COPY --chown=1001 target/quarkus-app/*.jar /deployments/
COPY --chown=1001 target/quarkus-app/app/ /deployments/app/
COPY --chown=1001 target/quarkus-app/quarkus/ /deployments/quarkus/

WORKDIR /deployments
EXPOSE 8080
USER 1001

RUN printf '#!/usr/bin/env sh\n\
. "venv/bin/activate"\n\
echo "Activated virtual environment..." \n\
./run-java.sh "$@"'\
>> /deployments/application.sh

RUN chmod +x /deployments/application.sh

RUN python3.9 -m venv /deployments/venv
RUN  . /deployments/venv/bin/activate \
  && python3.9 -m pip install --upgrade pip \
  && pip3.9 install -r /deployments/requirements.txt

ENTRYPOINT [ "/deployments/application.sh" ]

